// Code generated by mockery 2.9.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/Bhinneka/user-service/src/document/v2/model"
	mock "github.com/stretchr/testify/mock"

	repo "github.com/Bhinneka/user-service/src/document/v2/repo"
)

// DocumentRepository is an autogenerated mock type for the DocumentRepository type
type DocumentRepository struct {
	mock.Mock
}

// AddDocument provides a mock function with given fields: ctxReq, data
func (_m *DocumentRepository) AddDocument(ctxReq context.Context, data model.DocumentData) <-chan repo.ResultRepository {
	ret := _m.Called(ctxReq, data)

	var r0 <-chan repo.ResultRepository
	if rf, ok := ret.Get(0).(func(context.Context, model.DocumentData) <-chan repo.ResultRepository); ok {
		r0 = rf(ctxReq, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan repo.ResultRepository)
		}
	}

	return r0
}

// DeleteDocumentByID provides a mock function with given fields: ctxReq, documentID
func (_m *DocumentRepository) DeleteDocumentByID(ctxReq context.Context, documentID string) <-chan repo.ResultRepository {
	ret := _m.Called(ctxReq, documentID)

	var r0 <-chan repo.ResultRepository
	if rf, ok := ret.Get(0).(func(context.Context, string) <-chan repo.ResultRepository); ok {
		r0 = rf(ctxReq, documentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan repo.ResultRepository)
		}
	}

	return r0
}

// FindDocumentByParam provides a mock function with given fields: ctxReq, param
func (_m *DocumentRepository) FindDocumentByParam(ctxReq context.Context, param *model.DocumentParameters) <-chan repo.ResultRepository {
	ret := _m.Called(ctxReq, param)

	var r0 <-chan repo.ResultRepository
	if rf, ok := ret.Get(0).(func(context.Context, *model.DocumentParameters) <-chan repo.ResultRepository); ok {
		r0 = rf(ctxReq, param)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan repo.ResultRepository)
		}
	}

	return r0
}

// GetDetailDocument provides a mock function with given fields: ctxReq, params
func (_m *DocumentRepository) GetDetailDocument(ctxReq context.Context, params *model.DocumentParameters) <-chan repo.ResultRepository {
	ret := _m.Called(ctxReq, params)

	var r0 <-chan repo.ResultRepository
	if rf, ok := ret.Get(0).(func(context.Context, *model.DocumentParameters) <-chan repo.ResultRepository); ok {
		r0 = rf(ctxReq, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan repo.ResultRepository)
		}
	}

	return r0
}

// GetListDocument provides a mock function with given fields: ctxReq, param
func (_m *DocumentRepository) GetListDocument(ctxReq context.Context, param *model.DocumentParameters) <-chan repo.ResultRepository {
	ret := _m.Called(ctxReq, param)

	var r0 <-chan repo.ResultRepository
	if rf, ok := ret.Get(0).(func(context.Context, *model.DocumentParameters) <-chan repo.ResultRepository); ok {
		r0 = rf(ctxReq, param)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan repo.ResultRepository)
		}
	}

	return r0
}

// GetTotalDocument provides a mock function with given fields: ctxReq, params
func (_m *DocumentRepository) GetTotalDocument(ctxReq context.Context, params *model.DocumentParameters) <-chan repo.ResultRepository {
	ret := _m.Called(ctxReq, params)

	var r0 <-chan repo.ResultRepository
	if rf, ok := ret.Get(0).(func(context.Context, *model.DocumentParameters) <-chan repo.ResultRepository); ok {
		r0 = rf(ctxReq, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan repo.ResultRepository)
		}
	}

	return r0
}

// UpdateDocument provides a mock function with given fields: ctxReq, data
func (_m *DocumentRepository) UpdateDocument(ctxReq context.Context, data model.DocumentData) <-chan repo.ResultRepository {
	ret := _m.Called(ctxReq, data)

	var r0 <-chan repo.ResultRepository
	if rf, ok := ret.Get(0).(func(context.Context, model.DocumentData) <-chan repo.ResultRepository); ok {
		r0 = rf(ctxReq, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan repo.ResultRepository)
		}
	}

	return r0
}

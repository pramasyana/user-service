// Code generated by mockery 2.9.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/Bhinneka/user-service/src/corporate/v2/model"
	mock "github.com/stretchr/testify/mock"

	query "github.com/Bhinneka/user-service/src/corporate/v2/query"
)

// ContactQuery is an autogenerated mock type for the ContactQuery type
type ContactQuery struct {
	mock.Mock
}

// FindAccountByMemberType provides a mock function with given fields: ctxReq, memberType
func (_m *ContactQuery) FindAccountByMemberType(ctxReq context.Context, memberType string) <-chan query.ResultQuery {
	ret := _m.Called(ctxReq, memberType)

	var r0 <-chan query.ResultQuery
	if rf, ok := ret.Get(0).(func(context.Context, string) <-chan query.ResultQuery); ok {
		r0 = rf(ctxReq, memberType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan query.ResultQuery)
		}
	}

	return r0
}

// FindByEmail provides a mock function with given fields: ctxReq, email
func (_m *ContactQuery) FindByEmail(ctxReq context.Context, email string) <-chan query.ResultQuery {
	ret := _m.Called(ctxReq, email)

	var r0 <-chan query.ResultQuery
	if rf, ok := ret.Get(0).(func(context.Context, string) <-chan query.ResultQuery); ok {
		r0 = rf(ctxReq, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan query.ResultQuery)
		}
	}

	return r0
}

// FindByID provides a mock function with given fields: ctxReq, uid
func (_m *ContactQuery) FindByID(ctxReq context.Context, uid string) <-chan query.ResultQuery {
	ret := _m.Called(ctxReq, uid)

	var r0 <-chan query.ResultQuery
	if rf, ok := ret.Get(0).(func(context.Context, string) <-chan query.ResultQuery); ok {
		r0 = rf(ctxReq, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan query.ResultQuery)
		}
	}

	return r0
}

// FindContactByEmail provides a mock function with given fields: ctxReq, email
func (_m *ContactQuery) FindContactByEmail(ctxReq context.Context, email string) <-chan query.ResultQuery {
	ret := _m.Called(ctxReq, email)

	var r0 <-chan query.ResultQuery
	if rf, ok := ret.Get(0).(func(context.Context, string) <-chan query.ResultQuery); ok {
		r0 = rf(ctxReq, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan query.ResultQuery)
		}
	}

	return r0
}

// FindContactCorporateByEmail provides a mock function with given fields: ctxReq, email
func (_m *ContactQuery) FindContactCorporateByEmail(ctxReq context.Context, email string) <-chan query.ResultQuery {
	ret := _m.Called(ctxReq, email)

	var r0 <-chan query.ResultQuery
	if rf, ok := ret.Get(0).(func(context.Context, string) <-chan query.ResultQuery); ok {
		r0 = rf(ctxReq, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan query.ResultQuery)
		}
	}

	return r0
}

// FindContactMicrositeByEmail provides a mock function with given fields: ctxReq, email, transactionType, memberType
func (_m *ContactQuery) FindContactMicrositeByEmail(ctxReq context.Context, email string, transactionType string, memberType string) <-chan query.ResultQuery {
	ret := _m.Called(ctxReq, email, transactionType, memberType)

	var r0 <-chan query.ResultQuery
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) <-chan query.ResultQuery); ok {
		r0 = rf(ctxReq, email, transactionType, memberType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan query.ResultQuery)
		}
	}

	return r0
}

// GetListContact provides a mock function with given fields: ctxReq, params
func (_m *ContactQuery) GetListContact(ctxReq context.Context, params *model.ParametersContact) <-chan query.ResultQuery {
	ret := _m.Called(ctxReq, params)

	var r0 <-chan query.ResultQuery
	if rf, ok := ret.Get(0).(func(context.Context, *model.ParametersContact) <-chan query.ResultQuery); ok {
		r0 = rf(ctxReq, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan query.ResultQuery)
		}
	}

	return r0
}

// GetTotalContact provides a mock function with given fields: ctxReq, params
func (_m *ContactQuery) GetTotalContact(ctxReq context.Context, params *model.ParametersContact) <-chan query.ResultQuery {
	ret := _m.Called(ctxReq, params)

	var r0 <-chan query.ResultQuery
	if rf, ok := ret.Get(0).(func(context.Context, *model.ParametersContact) <-chan query.ResultQuery); ok {
		r0 = rf(ctxReq, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan query.ResultQuery)
		}
	}

	return r0
}

// GetTransactionType provides a mock function with given fields: ctxReq, email
func (_m *ContactQuery) GetTransactionType(ctxReq context.Context, email string) <-chan query.ResultQuery {
	ret := _m.Called(ctxReq, email)

	var r0 <-chan query.ResultQuery
	if rf, ok := ret.Get(0).(func(context.Context, string) <-chan query.ResultQuery); ok {
		r0 = rf(ctxReq, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan query.ResultQuery)
		}
	}

	return r0
}

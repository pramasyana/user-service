// Code generated by mockery 2.9.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/Bhinneka/user-service/src/corporate/v2/model"
	mock "github.com/stretchr/testify/mock"

	usecase "github.com/Bhinneka/user-service/src/corporate/v2/usecase"
)

// CorporateUseCase is an autogenerated mock type for the CorporateUseCase type
type CorporateUseCase struct {
	mock.Mock
}

// GetAllListContact provides a mock function with given fields: ctxReq, params
func (_m *CorporateUseCase) GetAllListContact(ctxReq context.Context, params *model.ParametersContact) <-chan usecase.ResultUseCase {
	ret := _m.Called(ctxReq, params)

	var r0 <-chan usecase.ResultUseCase
	if rf, ok := ret.Get(0).(func(context.Context, *model.ParametersContact) <-chan usecase.ResultUseCase); ok {
		r0 = rf(ctxReq, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan usecase.ResultUseCase)
		}
	}

	return r0
}

// GetDetailContact provides a mock function with given fields: ctxReq, id
func (_m *CorporateUseCase) GetDetailContact(ctxReq context.Context, id string) <-chan usecase.ResultUseCase {
	ret := _m.Called(ctxReq, id)

	var r0 <-chan usecase.ResultUseCase
	if rf, ok := ret.Get(0).(func(context.Context, string) <-chan usecase.ResultUseCase); ok {
		r0 = rf(ctxReq, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan usecase.ResultUseCase)
		}
	}

	return r0
}

// ImportContact provides a mock function with given fields: ctxReq, content
func (_m *CorporateUseCase) ImportContact(ctxReq context.Context, content []byte) ([]*model.ContactPayload, error) {
	ret := _m.Called(ctxReq, content)

	var r0 []*model.ContactPayload
	if rf, ok := ret.Get(0).(func(context.Context, []byte) []*model.ContactPayload); ok {
		r0 = rf(ctxReq, content)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.ContactPayload)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []byte) error); ok {
		r1 = rf(ctxReq, content)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

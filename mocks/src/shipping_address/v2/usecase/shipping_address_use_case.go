// Code generated by mockery 2.9.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/Bhinneka/user-service/src/shipping_address/v2/model"
	mock "github.com/stretchr/testify/mock"

	usecase "github.com/Bhinneka/user-service/src/shipping_address/v2/usecase"
)

// ShippingAddressUseCase is an autogenerated mock type for the ShippingAddressUseCase type
type ShippingAddressUseCase struct {
	mock.Mock
}

// AddShippingAddress provides a mock function with given fields: ctxReq, data
func (_m *ShippingAddressUseCase) AddShippingAddress(ctxReq context.Context, data model.ShippingAddressData) <-chan usecase.ResultUseCase {
	ret := _m.Called(ctxReq, data)

	var r0 <-chan usecase.ResultUseCase
	if rf, ok := ret.Get(0).(func(context.Context, model.ShippingAddressData) <-chan usecase.ResultUseCase); ok {
		r0 = rf(ctxReq, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan usecase.ResultUseCase)
		}
	}

	return r0
}

// DeleteShippingAddressByID provides a mock function with given fields: ctxReq, shippingID, memberID
func (_m *ShippingAddressUseCase) DeleteShippingAddressByID(ctxReq context.Context, shippingID string, memberID string) <-chan usecase.ResultUseCase {
	ret := _m.Called(ctxReq, shippingID, memberID)

	var r0 <-chan usecase.ResultUseCase
	if rf, ok := ret.Get(0).(func(context.Context, string, string) <-chan usecase.ResultUseCase); ok {
		r0 = rf(ctxReq, shippingID, memberID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan usecase.ResultUseCase)
		}
	}

	return r0
}

// GetAllListShippingAddress provides a mock function with given fields: ctxReq, params, memberID
func (_m *ShippingAddressUseCase) GetAllListShippingAddress(ctxReq context.Context, params *model.ParametersShippingAddress, memberID string) <-chan usecase.ResultUseCase {
	ret := _m.Called(ctxReq, params, memberID)

	var r0 <-chan usecase.ResultUseCase
	if rf, ok := ret.Get(0).(func(context.Context, *model.ParametersShippingAddress, string) <-chan usecase.ResultUseCase); ok {
		r0 = rf(ctxReq, params, memberID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan usecase.ResultUseCase)
		}
	}

	return r0
}

// GetDetailShippingAddress provides a mock function with given fields: ctxReq, shippingID, memberID
func (_m *ShippingAddressUseCase) GetDetailShippingAddress(ctxReq context.Context, shippingID string, memberID string) <-chan usecase.ResultUseCase {
	ret := _m.Called(ctxReq, shippingID, memberID)

	var r0 <-chan usecase.ResultUseCase
	if rf, ok := ret.Get(0).(func(context.Context, string, string) <-chan usecase.ResultUseCase); ok {
		r0 = rf(ctxReq, shippingID, memberID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan usecase.ResultUseCase)
		}
	}

	return r0
}

// GetListShippingAddress provides a mock function with given fields: ctxReq, params
func (_m *ShippingAddressUseCase) GetListShippingAddress(ctxReq context.Context, params *model.ParametersShippingAddress) <-chan usecase.ResultUseCase {
	ret := _m.Called(ctxReq, params)

	var r0 <-chan usecase.ResultUseCase
	if rf, ok := ret.Get(0).(func(context.Context, *model.ParametersShippingAddress) <-chan usecase.ResultUseCase); ok {
		r0 = rf(ctxReq, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan usecase.ResultUseCase)
		}
	}

	return r0
}

// GetPrimaryShippingAddress provides a mock function with given fields: ctxReq, memberID
func (_m *ShippingAddressUseCase) GetPrimaryShippingAddress(ctxReq context.Context, memberID string) <-chan usecase.ResultUseCase {
	ret := _m.Called(ctxReq, memberID)

	var r0 <-chan usecase.ResultUseCase
	if rf, ok := ret.Get(0).(func(context.Context, string) <-chan usecase.ResultUseCase); ok {
		r0 = rf(ctxReq, memberID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan usecase.ResultUseCase)
		}
	}

	return r0
}

// InsertLogShipping provides a mock function with given fields: ctxReq, oldData, newData, action
func (_m *ShippingAddressUseCase) InsertLogShipping(ctxReq context.Context, oldData *model.ShippingAddressData, newData *model.ShippingAddressData, action string) error {
	ret := _m.Called(ctxReq, oldData, newData, action)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.ShippingAddressData, *model.ShippingAddressData, string) error); ok {
		r0 = rf(ctxReq, oldData, newData, action)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePrimaryShippingAddressByID provides a mock function with given fields: ctxReq, params
func (_m *ShippingAddressUseCase) UpdatePrimaryShippingAddressByID(ctxReq context.Context, params model.ParamaterPrimaryShippingAddress) <-chan usecase.ResultUseCase {
	ret := _m.Called(ctxReq, params)

	var r0 <-chan usecase.ResultUseCase
	if rf, ok := ret.Get(0).(func(context.Context, model.ParamaterPrimaryShippingAddress) <-chan usecase.ResultUseCase); ok {
		r0 = rf(ctxReq, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan usecase.ResultUseCase)
		}
	}

	return r0
}

// UpdateShippingAddress provides a mock function with given fields: ctxReq, data
func (_m *ShippingAddressUseCase) UpdateShippingAddress(ctxReq context.Context, data model.ShippingAddressData) <-chan usecase.ResultUseCase {
	ret := _m.Called(ctxReq, data)

	var r0 <-chan usecase.ResultUseCase
	if rf, ok := ret.Get(0).(func(context.Context, model.ShippingAddressData) <-chan usecase.ResultUseCase); ok {
		r0 = rf(ctxReq, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan usecase.ResultUseCase)
		}
	}

	return r0
}

// Code generated by mockery 2.9.0. DO NOT EDIT.

package mocks

import (
	model "github.com/Bhinneka/user-service/src/shipping_address/v2/model"
	repo "github.com/Bhinneka/user-service/src/shipping_address/v2/repo"
	mock "github.com/stretchr/testify/mock"
)

// ShippingAddressRepositoryRedis is an autogenerated mock type for the ShippingAddressRepositoryRedis type
type ShippingAddressRepositoryRedis struct {
	mock.Mock
}

// DeleteMultipleRedis provides a mock function with given fields: memberID
func (_m *ShippingAddressRepositoryRedis) DeleteMultipleRedis(memberID string) <-chan error {
	ret := _m.Called(memberID)

	var r0 <-chan error
	if rf, ok := ret.Get(0).(func(string) <-chan error); ok {
		r0 = rf(memberID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan error)
		}
	}

	return r0
}

// LoadRedisMeta provides a mock function with given fields: memberID, page, limit
func (_m *ShippingAddressRepositoryRedis) LoadRedisMeta(memberID string, page string, limit string) <-chan repo.ResultRepository {
	ret := _m.Called(memberID, page, limit)

	var r0 <-chan repo.ResultRepository
	if rf, ok := ret.Get(0).(func(string, string, string) <-chan repo.ResultRepository); ok {
		r0 = rf(memberID, page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan repo.ResultRepository)
		}
	}

	return r0
}

// SaveRedisMeta provides a mock function with given fields: memberID, page, limit, shippingList
func (_m *ShippingAddressRepositoryRedis) SaveRedisMeta(memberID string, page string, limit string, shippingList model.ListShippingAddress) <-chan error {
	ret := _m.Called(memberID, page, limit, shippingList)

	var r0 <-chan error
	if rf, ok := ret.Get(0).(func(string, string, string, model.ListShippingAddress) <-chan error); ok {
		r0 = rf(memberID, page, limit, shippingList)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan error)
		}
	}

	return r0
}

// Code generated by mockery 2.9.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/Bhinneka/user-service/src/shipping_address/v2/model"
	mock "github.com/stretchr/testify/mock"

	repo "github.com/Bhinneka/user-service/src/shipping_address/v2/repo"
)

// ShippingAddressRepository is an autogenerated mock type for the ShippingAddressRepository type
type ShippingAddressRepository struct {
	mock.Mock
}

// AddShippingAddress provides a mock function with given fields: ctxReq, data
func (_m *ShippingAddressRepository) AddShippingAddress(ctxReq context.Context, data model.ShippingAddressData) <-chan repo.ResultRepository {
	ret := _m.Called(ctxReq, data)

	var r0 <-chan repo.ResultRepository
	if rf, ok := ret.Get(0).(func(context.Context, model.ShippingAddressData) <-chan repo.ResultRepository); ok {
		r0 = rf(ctxReq, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan repo.ResultRepository)
		}
	}

	return r0
}

// CountShippingAddressByUserID provides a mock function with given fields: ctxReq, id
func (_m *ShippingAddressRepository) CountShippingAddressByUserID(ctxReq context.Context, id string) <-chan repo.ResultRepository {
	ret := _m.Called(ctxReq, id)

	var r0 <-chan repo.ResultRepository
	if rf, ok := ret.Get(0).(func(context.Context, string) <-chan repo.ResultRepository); ok {
		r0 = rf(ctxReq, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan repo.ResultRepository)
		}
	}

	return r0
}

// Delete provides a mock function with given fields: _a0
func (_m *ShippingAddressRepository) Delete(_a0 model.ShippingAddress) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.ShippingAddress) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteShippingAddressByID provides a mock function with given fields: ctxReq, id
func (_m *ShippingAddressRepository) DeleteShippingAddressByID(ctxReq context.Context, id string) <-chan repo.ResultRepository {
	ret := _m.Called(ctxReq, id)

	var r0 <-chan repo.ResultRepository
	if rf, ok := ret.Get(0).(func(context.Context, string) <-chan repo.ResultRepository); ok {
		r0 = rf(ctxReq, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan repo.ResultRepository)
		}
	}

	return r0
}

// FindShippingAddressByID provides a mock function with given fields: ctxReq, id, memberID
func (_m *ShippingAddressRepository) FindShippingAddressByID(ctxReq context.Context, id string, memberID string) <-chan repo.ResultRepository {
	ret := _m.Called(ctxReq, id, memberID)

	var r0 <-chan repo.ResultRepository
	if rf, ok := ret.Get(0).(func(context.Context, string, string) <-chan repo.ResultRepository); ok {
		r0 = rf(ctxReq, id, memberID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan repo.ResultRepository)
		}
	}

	return r0
}

// FindShippingAddressPrimaryByID provides a mock function with given fields: ctxReq, memberID
func (_m *ShippingAddressRepository) FindShippingAddressPrimaryByID(ctxReq context.Context, memberID string) <-chan repo.ResultRepository {
	ret := _m.Called(ctxReq, memberID)

	var r0 <-chan repo.ResultRepository
	if rf, ok := ret.Get(0).(func(context.Context, string) <-chan repo.ResultRepository); ok {
		r0 = rf(ctxReq, memberID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan repo.ResultRepository)
		}
	}

	return r0
}

// GetListShippingAddress provides a mock function with given fields: ctxReq, params
func (_m *ShippingAddressRepository) GetListShippingAddress(ctxReq context.Context, params *model.ParametersShippingAddress) <-chan repo.ResultRepository {
	ret := _m.Called(ctxReq, params)

	var r0 <-chan repo.ResultRepository
	if rf, ok := ret.Get(0).(func(context.Context, *model.ParametersShippingAddress) <-chan repo.ResultRepository); ok {
		r0 = rf(ctxReq, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan repo.ResultRepository)
		}
	}

	return r0
}

// GetTotalShippingAddress provides a mock function with given fields: ctxReq, params
func (_m *ShippingAddressRepository) GetTotalShippingAddress(ctxReq context.Context, params *model.ParametersShippingAddress) <-chan repo.ResultRepository {
	ret := _m.Called(ctxReq, params)

	var r0 <-chan repo.ResultRepository
	if rf, ok := ret.Get(0).(func(context.Context, *model.ParametersShippingAddress) <-chan repo.ResultRepository); ok {
		r0 = rf(ctxReq, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan repo.ResultRepository)
		}
	}

	return r0
}

// Save provides a mock function with given fields: _a0
func (_m *ShippingAddressRepository) Save(_a0 model.ShippingAddress) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.ShippingAddress) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: _a0
func (_m *ShippingAddressRepository) Update(_a0 model.ShippingAddress) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.ShippingAddress) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePrimaryShippingAddressByID provides a mock function with given fields: ctxReq, id
func (_m *ShippingAddressRepository) UpdatePrimaryShippingAddressByID(ctxReq context.Context, id string) <-chan repo.ResultRepository {
	ret := _m.Called(ctxReq, id)

	var r0 <-chan repo.ResultRepository
	if rf, ok := ret.Get(0).(func(context.Context, string) <-chan repo.ResultRepository); ok {
		r0 = rf(ctxReq, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan repo.ResultRepository)
		}
	}

	return r0
}

// UpdateShippingAddress provides a mock function with given fields: ctxReq, data
func (_m *ShippingAddressRepository) UpdateShippingAddress(ctxReq context.Context, data model.ShippingAddressData) <-chan repo.ResultRepository {
	ret := _m.Called(ctxReq, data)

	var r0 <-chan repo.ResultRepository
	if rf, ok := ret.Get(0).(func(context.Context, model.ShippingAddressData) <-chan repo.ResultRepository); ok {
		r0 = rf(ctxReq, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan repo.ResultRepository)
		}
	}

	return r0
}

// Code generated by mockery 2.9.0. DO NOT EDIT.

package mocks

import (
	model "github.com/Bhinneka/user-service/src/member/v1/model"
	repo "github.com/Bhinneka/user-service/src/member/v1/repo"
	mock "github.com/stretchr/testify/mock"
)

// TokenActivationRepository is an autogenerated mock type for the TokenActivationRepository type
type TokenActivationRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: key
func (_m *TokenActivationRepository) Delete(key string) <-chan repo.ResultRepository {
	ret := _m.Called(key)

	var r0 <-chan repo.ResultRepository
	if rf, ok := ret.Get(0).(func(string) <-chan repo.ResultRepository); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan repo.ResultRepository)
		}
	}

	return r0
}

// Load provides a mock function with given fields: key
func (_m *TokenActivationRepository) Load(key string) <-chan repo.ResultRepository {
	ret := _m.Called(key)

	var r0 <-chan repo.ResultRepository
	if rf, ok := ret.Get(0).(func(string) <-chan repo.ResultRepository); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan repo.ResultRepository)
		}
	}

	return r0
}

// Save provides a mock function with given fields: _a0
func (_m *TokenActivationRepository) Save(_a0 *model.TokenActivation) <-chan repo.ResultRepository {
	ret := _m.Called(_a0)

	var r0 <-chan repo.ResultRepository
	if rf, ok := ret.Get(0).(func(*model.TokenActivation) <-chan repo.ResultRepository); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan repo.ResultRepository)
		}
	}

	return r0
}

// Code generated by mockery 2.9.0. DO NOT EDIT.

package mocks

import (
	context "context"

	repo "github.com/Bhinneka/user-service/src/member/v1/repo"
	mock "github.com/stretchr/testify/mock"
)

// MemberMFARepository is an autogenerated mock type for the MemberMFARepository type
type MemberMFARepository struct {
	mock.Mock
}

// DisableNarwhalMFA provides a mock function with given fields: ctxReq, uid
func (_m *MemberMFARepository) DisableNarwhalMFA(ctxReq context.Context, uid string) <-chan repo.ResultRepository {
	ret := _m.Called(ctxReq, uid)

	var r0 <-chan repo.ResultRepository
	if rf, ok := ret.Get(0).(func(context.Context, string) <-chan repo.ResultRepository); ok {
		r0 = rf(ctxReq, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan repo.ResultRepository)
		}
	}

	return r0
}

// EnableNarwhalMFA provides a mock function with given fields: ctxReq, uid, mfaKey
func (_m *MemberMFARepository) EnableNarwhalMFA(ctxReq context.Context, uid string, mfaKey string) <-chan repo.ResultRepository {
	ret := _m.Called(ctxReq, uid, mfaKey)

	var r0 <-chan repo.ResultRepository
	if rf, ok := ret.Get(0).(func(context.Context, string, string) <-chan repo.ResultRepository); ok {
		r0 = rf(ctxReq, uid, mfaKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan repo.ResultRepository)
		}
	}

	return r0
}

// MFADisabled provides a mock function with given fields: ctxReq, uid
func (_m *MemberMFARepository) MFADisabled(ctxReq context.Context, uid string) <-chan repo.ResultRepository {
	ret := _m.Called(ctxReq, uid)

	var r0 <-chan repo.ResultRepository
	if rf, ok := ret.Get(0).(func(context.Context, string) <-chan repo.ResultRepository); ok {
		r0 = rf(ctxReq, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan repo.ResultRepository)
		}
	}

	return r0
}

// MFAEnabled provides a mock function with given fields: ctxReq, uid, mfaKey
func (_m *MemberMFARepository) MFAEnabled(ctxReq context.Context, uid string, mfaKey string) <-chan repo.ResultRepository {
	ret := _m.Called(ctxReq, uid, mfaKey)

	var r0 <-chan repo.ResultRepository
	if rf, ok := ret.Get(0).(func(context.Context, string, string) <-chan repo.ResultRepository); ok {
		r0 = rf(ctxReq, uid, mfaKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan repo.ResultRepository)
		}
	}

	return r0
}

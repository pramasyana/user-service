// Code generated by mockery 2.9.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/Bhinneka/user-service/src/member/v1/model"
	mock "github.com/stretchr/testify/mock"

	repo "github.com/Bhinneka/user-service/src/member/v1/repo"
)

// MemberAdditionalInfoRepository is an autogenerated mock type for the MemberAdditionalInfoRepository type
type MemberAdditionalInfoRepository struct {
	mock.Mock
}

// Load provides a mock function with given fields: ctxReq, uid, authType
func (_m *MemberAdditionalInfoRepository) Load(ctxReq context.Context, uid string, authType string) <-chan repo.ResultRepository {
	ret := _m.Called(ctxReq, uid, authType)

	var r0 <-chan repo.ResultRepository
	if rf, ok := ret.Get(0).(func(context.Context, string, string) <-chan repo.ResultRepository); ok {
		r0 = rf(ctxReq, uid, authType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan repo.ResultRepository)
		}
	}

	return r0
}

// Save provides a mock function with given fields: ctxReq, data
func (_m *MemberAdditionalInfoRepository) Save(ctxReq context.Context, data *model.MemberAdditionalInfo) <-chan repo.ResultRepository {
	ret := _m.Called(ctxReq, data)

	var r0 <-chan repo.ResultRepository
	if rf, ok := ret.Get(0).(func(context.Context, *model.MemberAdditionalInfo) <-chan repo.ResultRepository); ok {
		r0 = rf(ctxReq, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan repo.ResultRepository)
		}
	}

	return r0
}

// Update provides a mock function with given fields: ctxReq, data
func (_m *MemberAdditionalInfoRepository) Update(ctxReq context.Context, data *model.MemberAdditionalInfo) <-chan repo.ResultRepository {
	ret := _m.Called(ctxReq, data)

	var r0 <-chan repo.ResultRepository
	if rf, ok := ret.Get(0).(func(context.Context, *model.MemberAdditionalInfo) <-chan repo.ResultRepository); ok {
		r0 = rf(ctxReq, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan repo.ResultRepository)
		}
	}

	return r0
}

// Code generated by mockery 2.9.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/Bhinneka/user-service/src/merchant/v2/model"
	mock "github.com/stretchr/testify/mock"

	repo "github.com/Bhinneka/user-service/src/merchant/v2/repo"
)

// MerchantBankRepository is an autogenerated mock type for the MerchantBankRepository type
type MerchantBankRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: _a0
func (_m *MerchantBankRepository) Delete(_a0 model.B2CMerchantBank) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.B2CMerchantBank) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindActiveMerchantBankByID provides a mock function with given fields: ctxReq, bankID
func (_m *MerchantBankRepository) FindActiveMerchantBankByID(ctxReq context.Context, bankID int) <-chan repo.ResultRepository {
	ret := _m.Called(ctxReq, bankID)

	var r0 <-chan repo.ResultRepository
	if rf, ok := ret.Get(0).(func(context.Context, int) <-chan repo.ResultRepository); ok {
		r0 = rf(ctxReq, bankID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan repo.ResultRepository)
		}
	}

	return r0
}

// GetListMerchantBank provides a mock function with given fields: params
func (_m *MerchantBankRepository) GetListMerchantBank(params *model.ParametersMerchantBank) <-chan repo.ResultRepository {
	ret := _m.Called(params)

	var r0 <-chan repo.ResultRepository
	if rf, ok := ret.Get(0).(func(*model.ParametersMerchantBank) <-chan repo.ResultRepository); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan repo.ResultRepository)
		}
	}

	return r0
}

// GetTotalMerchantBank provides a mock function with given fields: params
func (_m *MerchantBankRepository) GetTotalMerchantBank(params *model.ParametersMerchantBank) <-chan repo.ResultRepository {
	ret := _m.Called(params)

	var r0 <-chan repo.ResultRepository
	if rf, ok := ret.Get(0).(func(*model.ParametersMerchantBank) <-chan repo.ResultRepository); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan repo.ResultRepository)
		}
	}

	return r0
}

// Load provides a mock function with given fields: uid
func (_m *MerchantBankRepository) Load(uid string) repo.ResultRepository {
	ret := _m.Called(uid)

	var r0 repo.ResultRepository
	if rf, ok := ret.Get(0).(func(string) repo.ResultRepository); ok {
		r0 = rf(uid)
	} else {
		r0 = ret.Get(0).(repo.ResultRepository)
	}

	return r0
}

// Save provides a mock function with given fields: _a0
func (_m *MerchantBankRepository) Save(_a0 model.B2CMerchantBank) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.B2CMerchantBank) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveMasterBankGWS provides a mock function with given fields: ctxReq, data
func (_m *MerchantBankRepository) SaveMasterBankGWS(ctxReq context.Context, data model.B2CMerchantBank) error {
	ret := _m.Called(ctxReq, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.B2CMerchantBank) error); ok {
		r0 = rf(ctxReq, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

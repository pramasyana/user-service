// Code generated by mockery 2.9.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/Bhinneka/user-service/src/member/v1/model"
	mock "github.com/stretchr/testify/mock"

	sharedmodel "github.com/Bhinneka/user-service/src/shared/model"
)

// ClientUsecase is an autogenerated mock type for the ClientUsecase type
type ClientUsecase struct {
	mock.Mock
}

// GetMemberByEmail provides a mock function with given fields: ctxReq, email
func (_m *ClientUsecase) GetMemberByEmail(ctxReq context.Context, email string) (*model.Member, int, error) {
	ret := _m.Called(ctxReq, email)

	var r0 *model.Member
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Member); ok {
		r0 = rf(ctxReq, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Member)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, string) int); ok {
		r1 = rf(ctxReq, email)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctxReq, email)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Logout provides a mock function with given fields: ctx, email
func (_m *ClientUsecase) Logout(ctx context.Context, email string) <-chan sharedmodel.ResultUseCase {
	ret := _m.Called(ctx, email)

	var r0 <-chan sharedmodel.ResultUseCase
	if rf, ok := ret.Get(0).(func(context.Context, string) <-chan sharedmodel.ResultUseCase); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan sharedmodel.ResultUseCase)
		}
	}

	return r0
}

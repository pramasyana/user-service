// Code generated by mockery 2.9.0. DO NOT EDIT.

package mocks

import (
	context "context"

	member "github.com/Bhinneka/user-service/protogo/member"
	mock "github.com/stretchr/testify/mock"
)

// MemberServiceServer is an autogenerated mock type for the MemberServiceServer type
type MemberServiceServer struct {
	mock.Mock
}

// FindByID provides a mock function with given fields: _a0, _a1
func (_m *MemberServiceServer) FindByID(_a0 context.Context, _a1 *member.MemberQuery) (*member.Member, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *member.Member
	if rf, ok := ret.Get(0).(func(context.Context, *member.MemberQuery) *member.Member); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*member.Member)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *member.MemberQuery) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMe provides a mock function with given fields: _a0, _a1
func (_m *MemberServiceServer) GetMe(_a0 context.Context, _a1 *member.MemberQuery) (*member.Member, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *member.Member
	if rf, ok := ret.Get(0).(func(context.Context, *member.MemberQuery) *member.Member); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*member.Member)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *member.MemberQuery) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: _a0, _a1
func (_m *MemberServiceServer) Register(_a0 context.Context, _a1 *member.MemberRegister) (*member.ResponseMessage, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *member.ResponseMessage
	if rf, ok := ret.Get(0).(func(context.Context, *member.MemberRegister) *member.ResponseMessage); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*member.ResponseMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *member.MemberRegister) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *MemberServiceServer) Update(_a0 context.Context, _a1 *member.MemberUpdate) (*member.ResponseMessage, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *member.ResponseMessage
	if rf, ok := ret.Get(0).(func(context.Context, *member.MemberUpdate) *member.ResponseMessage); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*member.ResponseMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *member.MemberUpdate) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePassword provides a mock function with given fields: _a0, _a1
func (_m *MemberServiceServer) UpdatePassword(_a0 context.Context, _a1 *member.MemberPasswordRequest) (*member.ResponseMessage, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *member.ResponseMessage
	if rf, ok := ret.Get(0).(func(context.Context, *member.MemberPasswordRequest) *member.ResponseMessage); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*member.ResponseMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *member.MemberPasswordRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Code generated by mockery 2.9.0. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	member "github.com/Bhinneka/user-service/protogo/member"

	mock "github.com/stretchr/testify/mock"
)

// MemberServiceClient is an autogenerated mock type for the MemberServiceClient type
type MemberServiceClient struct {
	mock.Mock
}

// FindByID provides a mock function with given fields: ctx, in, opts
func (_m *MemberServiceClient) FindByID(ctx context.Context, in *member.MemberQuery, opts ...grpc.CallOption) (*member.Member, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *member.Member
	if rf, ok := ret.Get(0).(func(context.Context, *member.MemberQuery, ...grpc.CallOption) *member.Member); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*member.Member)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *member.MemberQuery, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMe provides a mock function with given fields: ctx, in, opts
func (_m *MemberServiceClient) GetMe(ctx context.Context, in *member.MemberQuery, opts ...grpc.CallOption) (*member.Member, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *member.Member
	if rf, ok := ret.Get(0).(func(context.Context, *member.MemberQuery, ...grpc.CallOption) *member.Member); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*member.Member)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *member.MemberQuery, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: ctx, in, opts
func (_m *MemberServiceClient) Register(ctx context.Context, in *member.MemberRegister, opts ...grpc.CallOption) (*member.ResponseMessage, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *member.ResponseMessage
	if rf, ok := ret.Get(0).(func(context.Context, *member.MemberRegister, ...grpc.CallOption) *member.ResponseMessage); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*member.ResponseMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *member.MemberRegister, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, in, opts
func (_m *MemberServiceClient) Update(ctx context.Context, in *member.MemberUpdate, opts ...grpc.CallOption) (*member.ResponseMessage, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *member.ResponseMessage
	if rf, ok := ret.Get(0).(func(context.Context, *member.MemberUpdate, ...grpc.CallOption) *member.ResponseMessage); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*member.ResponseMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *member.MemberUpdate, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePassword provides a mock function with given fields: ctx, in, opts
func (_m *MemberServiceClient) UpdatePassword(ctx context.Context, in *member.MemberPasswordRequest, opts ...grpc.CallOption) (*member.ResponseMessage, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *member.ResponseMessage
	if rf, ok := ret.Get(0).(func(context.Context, *member.MemberPasswordRequest, ...grpc.CallOption) *member.ResponseMessage); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*member.ResponseMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *member.MemberPasswordRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

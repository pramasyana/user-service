// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"
import model "github.com/Bhinneka/user-service/src/member/v1/model"
import query "github.com/Bhinneka/user-service/src/member/v1/query"

// MemberQuery is an autogenerated mock type for the MemberQuery type
type MemberQuery struct {
	mock.Mock
}

// BulkFindByEmail provides a mock function with given fields: ctxReq, emails
func (_m *MemberQuery) BulkFindByEmail(ctxReq context.Context, emails []string) <-chan query.ResultQuery {
	ret := _m.Called(ctxReq, emails)

	var r0 <-chan query.ResultQuery
	if rf, ok := ret.Get(0).(func(context.Context, []string) <-chan query.ResultQuery); ok {
		r0 = rf(ctxReq, emails)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan query.ResultQuery)
		}
	}

	return r0
}

// FindByEmail provides a mock function with given fields: ctxReq, email
func (_m *MemberQuery) FindByEmail(ctxReq context.Context, email string) <-chan query.ResultQuery {
	ret := _m.Called(ctxReq, email)

	var r0 <-chan query.ResultQuery
	if rf, ok := ret.Get(0).(func(context.Context, string) <-chan query.ResultQuery); ok {
		r0 = rf(ctxReq, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan query.ResultQuery)
		}
	}

	return r0
}

// FindByID provides a mock function with given fields: ctxReq, email
func (_m *MemberQuery) FindByID(ctxReq context.Context, email string) <-chan query.ResultQuery {
	ret := _m.Called(ctxReq, email)

	var r0 <-chan query.ResultQuery
	if rf, ok := ret.Get(0).(func(context.Context, string) <-chan query.ResultQuery); ok {
		r0 = rf(ctxReq, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan query.ResultQuery)
		}
	}

	return r0
}

// FindByMobile provides a mock function with given fields: ctxReq, mobile
func (_m *MemberQuery) FindByMobile(ctxReq context.Context, mobile string) <-chan query.ResultQuery {
	ret := _m.Called(ctxReq, mobile)

	var r0 <-chan query.ResultQuery
	if rf, ok := ret.Get(0).(func(context.Context, string) <-chan query.ResultQuery); ok {
		r0 = rf(ctxReq, mobile)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan query.ResultQuery)
		}
	}

	return r0
}

// FindByToken provides a mock function with given fields: ctxReq, token
func (_m *MemberQuery) FindByToken(ctxReq context.Context, token string) <-chan query.ResultQuery {
	ret := _m.Called(ctxReq, token)

	var r0 <-chan query.ResultQuery
	if rf, ok := ret.Get(0).(func(context.Context, string) <-chan query.ResultQuery); ok {
		r0 = rf(ctxReq, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan query.ResultQuery)
		}
	}

	return r0
}

// FindMaxID provides a mock function with given fields: ctxReq
func (_m *MemberQuery) FindMaxID(ctxReq context.Context) <-chan query.ResultQuery {
	ret := _m.Called(ctxReq)

	var r0 <-chan query.ResultQuery
	if rf, ok := ret.Get(0).(func(context.Context) <-chan query.ResultQuery); ok {
		r0 = rf(ctxReq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan query.ResultQuery)
		}
	}

	return r0
}

// GetListMembers provides a mock function with given fields: ctxReq, params
func (_m *MemberQuery) GetListMembers(ctxReq context.Context, params *model.Parameters) <-chan query.ResultQuery {
	ret := _m.Called(ctxReq, params)

	var r0 <-chan query.ResultQuery
	if rf, ok := ret.Get(0).(func(context.Context, *model.Parameters) <-chan query.ResultQuery); ok {
		r0 = rf(ctxReq, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan query.ResultQuery)
		}
	}

	return r0
}

// GetTotalMembers provides a mock function with given fields: params
func (_m *MemberQuery) GetTotalMembers(params *model.Parameters) <-chan query.ResultQuery {
	ret := _m.Called(params)

	var r0 <-chan query.ResultQuery
	if rf, ok := ret.Get(0).(func(*model.Parameters) <-chan query.ResultQuery); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan query.ResultQuery)
		}
	}

	return r0
}

// UnblockMember provides a mock function with given fields: email
func (_m *MemberQuery) UnblockMember(email string) <-chan query.ResultQuery {
	ret := _m.Called(email)

	var r0 <-chan query.ResultQuery
	if rf, ok := ret.Get(0).(func(string) <-chan query.ResultQuery); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan query.ResultQuery)
		}
	}

	return r0
}

// UpdateBlockedMember provides a mock function with given fields: email
func (_m *MemberQuery) UpdateBlockedMember(email string) <-chan query.ResultQuery {
	ret := _m.Called(email)

	var r0 <-chan query.ResultQuery
	if rf, ok := ret.Get(0).(func(string) <-chan query.ResultQuery); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan query.ResultQuery)
		}
	}

	return r0
}

// UpdateLastTokenAttempt provides a mock function with given fields: ctxReq, email
func (_m *MemberQuery) UpdateLastTokenAttempt(ctxReq context.Context, email string) <-chan query.ResultQuery {
	ret := _m.Called(ctxReq, email)

	var r0 <-chan query.ResultQuery
	if rf, ok := ret.Get(0).(func(context.Context, string) <-chan query.ResultQuery); ok {
		r0 = rf(ctxReq, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan query.ResultQuery)
		}
	}

	return r0
}

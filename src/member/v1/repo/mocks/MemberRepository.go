// Code generated by mockery 2.9.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/Bhinneka/user-service/src/member/v1/model"
	mock "github.com/stretchr/testify/mock"

	repo "github.com/Bhinneka/user-service/src/member/v1/repo"
)

// MemberRepository is an autogenerated mock type for the MemberRepository type
type MemberRepository struct {
	mock.Mock
}

// BulkImportSave provides a mock function with given fields: ctxReq, member
func (_m *MemberRepository) BulkImportSave(ctxReq context.Context, member []*model.Member) <-chan repo.ResultRepository {
	ret := _m.Called(ctxReq, member)

	var r0 <-chan repo.ResultRepository
	if rf, ok := ret.Get(0).(func(context.Context, []*model.Member) <-chan repo.ResultRepository); ok {
		r0 = rf(ctxReq, member)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan repo.ResultRepository)
		}
	}

	return r0
}

// BulkSave provides a mock function with given fields: ctxReq, member
func (_m *MemberRepository) BulkSave(ctxReq context.Context, member []model.Member) <-chan repo.ResultRepository {
	ret := _m.Called(ctxReq, member)

	var r0 <-chan repo.ResultRepository
	if rf, ok := ret.Get(0).(func(context.Context, []model.Member) <-chan repo.ResultRepository); ok {
		r0 = rf(ctxReq, member)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan repo.ResultRepository)
		}
	}

	return r0
}

// FindMaxID provides a mock function with given fields: ctxReq
func (_m *MemberRepository) FindMaxID(ctxReq context.Context) <-chan repo.ResultRepository {
	ret := _m.Called(ctxReq)

	var r0 <-chan repo.ResultRepository
	if rf, ok := ret.Get(0).(func(context.Context) <-chan repo.ResultRepository); ok {
		r0 = rf(ctxReq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan repo.ResultRepository)
		}
	}

	return r0
}

// Load provides a mock function with given fields: ctxReq, uid
func (_m *MemberRepository) Load(ctxReq context.Context, uid string) <-chan repo.ResultRepository {
	ret := _m.Called(ctxReq, uid)

	var r0 <-chan repo.ResultRepository
	if rf, ok := ret.Get(0).(func(context.Context, string) <-chan repo.ResultRepository); ok {
		r0 = rf(ctxReq, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan repo.ResultRepository)
		}
	}

	return r0
}

// LoadMember provides a mock function with given fields: uid
func (_m *MemberRepository) LoadMember(uid string) repo.ResultRepository {
	ret := _m.Called(uid)

	var r0 repo.ResultRepository
	if rf, ok := ret.Get(0).(func(string) repo.ResultRepository); ok {
		r0 = rf(uid)
	} else {
		r0 = ret.Get(0).(repo.ResultRepository)
	}

	return r0
}

// Save provides a mock function with given fields: ctxReq, member
func (_m *MemberRepository) Save(ctxReq context.Context, member model.Member) <-chan repo.ResultRepository {
	ret := _m.Called(ctxReq, member)

	var r0 <-chan repo.ResultRepository
	if rf, ok := ret.Get(0).(func(context.Context, model.Member) <-chan repo.ResultRepository); ok {
		r0 = rf(ctxReq, member)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan repo.ResultRepository)
		}
	}

	return r0
}

// UpdateFlagIsSyncMember provides a mock function with given fields: ctxReq, member
func (_m *MemberRepository) UpdateFlagIsSyncMember(ctxReq context.Context, member model.Member) <-chan repo.ResultRepository {
	ret := _m.Called(ctxReq, member)

	var r0 <-chan repo.ResultRepository
	if rf, ok := ret.Get(0).(func(context.Context, model.Member) <-chan repo.ResultRepository); ok {
		r0 = rf(ctxReq, member)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan repo.ResultRepository)
		}
	}

	return r0
}

// UpdateProfilePicture provides a mock function with given fields: ctxReq, data
func (_m *MemberRepository) UpdateProfilePicture(ctxReq context.Context, data model.ProfilePicture) <-chan repo.ResultRepository {
	ret := _m.Called(ctxReq, data)

	var r0 <-chan repo.ResultRepository
	if rf, ok := ret.Get(0).(func(context.Context, model.ProfilePicture) <-chan repo.ResultRepository); ok {
		r0 = rf(ctxReq, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan repo.ResultRepository)
		}
	}

	return r0
}

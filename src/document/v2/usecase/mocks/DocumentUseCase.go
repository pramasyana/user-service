package mocks

import (
	"context"

	model "github.com/Bhinneka/user-service/src/document/v2/model"
	usecase "github.com/Bhinneka/user-service/src/document/v2/usecase"
	mock "github.com/stretchr/testify/mock"
)

// DocumentUseCase is an autogenerated mock type for the DocumentUseCase type
type DocumentUseCase struct {
	mock.Mock
}

// MockDetailDocumentUseCase provides a mock function with given: uid
func (_m *DocumentUseCase) MockDetailDocumentUseCase(ctxReq context.Context, documentID, memberID string, ret mock.Arguments) <-chan usecase.ResultUseCase {
	var r0 <-chan usecase.ResultUseCase
	if rf, ok := ret.Get(0).(func(context.Context, string, string) <-chan usecase.ResultUseCase); ok {
		r0 = rf(ctxReq, documentID, memberID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan usecase.ResultUseCase)
		}
	}

	return r0
}

// AddUpdateDocument provides a mock function with given fields: data
func (_m *DocumentUseCase) AddUpdateDocument(ctxReq context.Context, data model.DocumentData) <-chan usecase.ResultUseCase {
	ret := _m.Called(ctxReq, data)

	var r0 <-chan usecase.ResultUseCase
	if rf, ok := ret.Get(0).(func(context.Context, model.DocumentData) <-chan usecase.ResultUseCase); ok {
		r0 = rf(ctxReq, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan usecase.ResultUseCase)
		}
	}

	return r0
}

// DeleteDocument provides a mock function with given fields: data
func (_m *DocumentUseCase) DeleteDocument(ctxReq context.Context, documentID string, memberID string) <-chan usecase.ResultUseCase {
	ret := _m.Called(ctxReq, documentID, memberID)
	return _m.MockDetailDocumentUseCase(ctxReq, documentID, memberID, ret)
}

// GetListDocument provides a mock function with given fields: data
func (_m *DocumentUseCase) GetListDocument(ctxReq context.Context, params *model.DocumentParameters) <-chan usecase.ResultUseCase {
	ret := _m.Called(ctxReq, params)

	var r0 <-chan usecase.ResultUseCase
	if rf, ok := ret.Get(0).(func(context.Context, *model.DocumentParameters) <-chan usecase.ResultUseCase); ok {
		r0 = rf(ctxReq, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan usecase.ResultUseCase)
		}
	}

	return r0
}

// GetDetailDocument provides a mock function with given fields: data
func (_m *DocumentUseCase) GetDetailDocument(ctxReq context.Context, documentID, memberID string) <-chan usecase.ResultUseCase {
	ret := _m.Called(ctxReq, documentID, memberID)
	return _m.MockDetailDocumentUseCase(ctxReq, documentID, memberID, ret)

}

// AddUpdateDocumentType provides a mock function with given fields: data
func (_m *DocumentUseCase) AddUpdateDocumentType(ctxReq context.Context, data model.DocumentType) <-chan usecase.ResultUseCase {
	ret := _m.Called(ctxReq, data)

	var r0 <-chan usecase.ResultUseCase
	if rf, ok := ret.Get(0).(func(context.Context, model.DocumentType) <-chan usecase.ResultUseCase); ok {
		r0 = rf(ctxReq, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan usecase.ResultUseCase)
		}
	}

	return r0
}

// GetListDocumentType provides a mock function with given fields: data
func (_m *DocumentUseCase) GetListDocumentType(ctxReq context.Context, params *model.DocumentTypeParameters) <-chan usecase.ResultUseCase {
	ret := _m.Called(ctxReq, params)

	var r0 <-chan usecase.ResultUseCase
	if rf, ok := ret.Get(0).(func(context.Context, *model.DocumentTypeParameters) <-chan usecase.ResultUseCase); ok {
		r0 = rf(ctxReq, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan usecase.ResultUseCase)
		}
	}

	return r0
}

// GetRequiredDocument provides a mock function with given fields: data
func (_m *DocumentUseCase) GetRequiredDocument(ctxReq context.Context) <-chan usecase.ResultUseCase {
	ret := _m.Called(ctxReq)

	var r0 <-chan usecase.ResultUseCase
	if rf, ok := ret.Get(0).(func(context.Context) <-chan usecase.ResultUseCase); ok {
		r0 = rf(ctxReq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan usecase.ResultUseCase)
		}
	}

	return r0
}

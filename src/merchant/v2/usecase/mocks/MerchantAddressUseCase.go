// Code generated by mockery 2.9.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/Bhinneka/user-service/src/merchant/v2/model"
	mock "github.com/stretchr/testify/mock"

	usecase "github.com/Bhinneka/user-service/src/merchant/v2/usecase"
)

// MerchantAddressUseCase is an autogenerated mock type for the MerchantAddressUseCase type
type MerchantAddressUseCase struct {
	mock.Mock
}

// AddUpdateWarehouseAddress provides a mock function with given fields: ctxReq, data, memberID, action
func (_m *MerchantAddressUseCase) AddUpdateWarehouseAddress(ctxReq context.Context, data model.WarehouseData, memberID string, action string) <-chan usecase.ResultUseCase {
	ret := _m.Called(ctxReq, data, memberID, action)

	var r0 <-chan usecase.ResultUseCase
	if rf, ok := ret.Get(0).(func(context.Context, model.WarehouseData, string, string) <-chan usecase.ResultUseCase); ok {
		r0 = rf(ctxReq, data, memberID, action)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan usecase.ResultUseCase)
		}
	}

	return r0
}

// DeleteWarehouseAddress provides a mock function with given fields: ctxReq, addressID, memberID
func (_m *MerchantAddressUseCase) DeleteWarehouseAddress(ctxReq context.Context, addressID string, memberID string) <-chan usecase.ResultUseCase {
	ret := _m.Called(ctxReq, addressID, memberID)

	var r0 <-chan usecase.ResultUseCase
	if rf, ok := ret.Get(0).(func(context.Context, string, string) <-chan usecase.ResultUseCase); ok {
		r0 = rf(ctxReq, addressID, memberID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan usecase.ResultUseCase)
		}
	}

	return r0
}

// GetDetailWarehouseAddress provides a mock function with given fields: ctxReq, addressID, memberID
func (_m *MerchantAddressUseCase) GetDetailWarehouseAddress(ctxReq context.Context, addressID string, memberID string) <-chan usecase.ResultUseCase {
	ret := _m.Called(ctxReq, addressID, memberID)

	var r0 <-chan usecase.ResultUseCase
	if rf, ok := ret.Get(0).(func(context.Context, string, string) <-chan usecase.ResultUseCase); ok {
		r0 = rf(ctxReq, addressID, memberID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan usecase.ResultUseCase)
		}
	}

	return r0
}

// GetWarehouseAddressByID provides a mock function with given fields: ctxReq, merchantID, addressID
func (_m *MerchantAddressUseCase) GetWarehouseAddressByID(ctxReq context.Context, merchantID string, addressID string) <-chan usecase.ResultUseCase {
	ret := _m.Called(ctxReq, merchantID, addressID)

	var r0 <-chan usecase.ResultUseCase
	if rf, ok := ret.Get(0).(func(context.Context, string, string) <-chan usecase.ResultUseCase); ok {
		r0 = rf(ctxReq, merchantID, addressID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan usecase.ResultUseCase)
		}
	}

	return r0
}

// GetWarehouseAddresses provides a mock function with given fields: ctxReq, params
func (_m *MerchantAddressUseCase) GetWarehouseAddresses(ctxReq context.Context, params *model.ParameterWarehouse) <-chan usecase.ResultUseCase {
	ret := _m.Called(ctxReq, params)

	var r0 <-chan usecase.ResultUseCase
	if rf, ok := ret.Get(0).(func(context.Context, *model.ParameterWarehouse) <-chan usecase.ResultUseCase); ok {
		r0 = rf(ctxReq, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan usecase.ResultUseCase)
		}
	}

	return r0
}

// UpdatePrimaryWarehouseAddress provides a mock function with given fields: ctxReq, data
func (_m *MerchantAddressUseCase) UpdatePrimaryWarehouseAddress(ctxReq context.Context, data model.ParameterPrimaryWarehouse) <-chan usecase.ResultUseCase {
	ret := _m.Called(ctxReq, data)

	var r0 <-chan usecase.ResultUseCase
	if rf, ok := ret.Get(0).(func(context.Context, model.ParameterPrimaryWarehouse) <-chan usecase.ResultUseCase); ok {
		r0 = rf(ctxReq, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan usecase.ResultUseCase)
		}
	}

	return r0
}

// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"
import model "github.com/Bhinneka/user-service/src/merchant/v2/model"
import repo "github.com/Bhinneka/user-service/src/merchant/v2/repo"

// MerchantRepository is an autogenerated mock type for the MerchantRepository type
type MerchantAddressRepository struct {
	mock.Mock
}

// AddUpdateMerchant provides a mock function with given fields: ctxReq, data
func (_m *MerchantAddressRepository) AddUpdateAddressMaps(ctxReq context.Context, data model.Maps) <-chan repo.ResultRepository {
	ret := _m.Called(ctxReq, data)

	var r0 <-chan repo.ResultRepository
	if rf, ok := ret.Get(0).(func(context.Context, model.Maps) <-chan repo.ResultRepository); ok {
		r0 = rf(ctxReq, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan repo.ResultRepository)
		}
	}

	return r0
}

// AddUpdateMerchant provides a mock function with given fields: ctxReq, data
func (_m *MerchantAddressRepository) AddUpdateMerchant(ctxReq context.Context, address model.PhoneData) <-chan repo.ResultRepository {
	ret := _m.Called(ctxReq, address)

	var r0 <-chan repo.ResultRepository
	if rf, ok := ret.Get(0).(func(context.Context, model.PhoneData) <-chan repo.ResultRepository); ok {
		r0 = rf(ctxReq, address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan repo.ResultRepository)
		}
	}

	return r0
}

// AddUpdateAddress provides a mock function with given fields: ctxReq, data
func (_m *MerchantAddressRepository) AddUpdateAddress(ctxReq context.Context, address model.AddressData) <-chan repo.ResultRepository {
	ret := _m.Called(ctxReq, address)

	var r0 <-chan repo.ResultRepository
	if rf, ok := ret.Get(0).(func(context.Context, model.AddressData) <-chan repo.ResultRepository); ok {
		r0 = rf(ctxReq, address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan repo.ResultRepository)
		}
	}

	return r0
}

// AddPhoneAddress provides a mock function with given fields: ctxReq, data
func (_m *MerchantAddressRepository) AddPhoneAddress(ctxReq context.Context, address model.PhoneData) <-chan repo.ResultRepository {
	ret := _m.Called(ctxReq, address)

	var r0 <-chan repo.ResultRepository
	if rf, ok := ret.Get(0).(func(context.Context, model.PhoneData) <-chan repo.ResultRepository); ok {
		r0 = rf(ctxReq, address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan repo.ResultRepository)
		}
	}

	return r0
}

// CountAddress provides a mock function with given fields: ctxReq, data
func (_m *MerchantAddressRepository) CountAddress(ctxReq context.Context, relationID, relationName string, params *model.ParameterWarehouse) <-chan repo.ResultRepository {
	ret := _m.Called(ctxReq, relationID, params)

	var r0 <-chan repo.ResultRepository
	if rf, ok := ret.Get(0).(func(context.Context, string, *model.ParameterWarehouse) <-chan repo.ResultRepository); ok {
		r0 = rf(ctxReq, relationID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan repo.ResultRepository)
		}
	}

	return r0
}

// DeletePhoneAddress provides a mock function with given fields: ctxReq, data
func (_m *MerchantAddressRepository) DeletePhoneAddress(ctxReq context.Context, relationID, relationName string) <-chan repo.ResultRepository {
	ret := _m.Called(ctxReq, relationID, relationName)

	var r0 <-chan repo.ResultRepository
	if rf, ok := ret.Get(0).(func(context.Context, string, string) <-chan repo.ResultRepository); ok {
		r0 = rf(ctxReq, relationID, relationName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan repo.ResultRepository)
		}
	}

	return r0
}

// DeleteWarehouseAddress provides a mock function with given fields: ctxReq, data
func (_m *MerchantAddressRepository) DeleteWarehouseAddress(ctxReq context.Context, id string) <-chan repo.ResultRepository {
	ret := _m.Called(ctxReq, id)

	var r0 <-chan repo.ResultRepository
	if rf, ok := ret.Get(0).(func(context.Context, string) <-chan repo.ResultRepository); ok {
		r0 = rf(ctxReq, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan repo.ResultRepository)
		}
	}

	return r0
}

// FindMerchantAddress provides a mock function with given fields: ctxReq, data
func (_m *MerchantAddressRepository) FindMerchantAddress(ctxReq context.Context, id string) <-chan repo.ResultRepository {
	ret := _m.Called(ctxReq, id)

	var r0 <-chan repo.ResultRepository
	if rf, ok := ret.Get(0).(func(context.Context, string) <-chan repo.ResultRepository); ok {
		r0 = rf(ctxReq, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan repo.ResultRepository)
		}
	}

	return r0
}

// GetListAddress provides a mock function with given fields: ctxReq, data
func (_m *MerchantAddressRepository) GetListAddress(ctxReq context.Context, params *model.ParameterWarehouse) <-chan repo.ResultRepository {
	ret := _m.Called(ctxReq, params)

	var r0 <-chan repo.ResultRepository
	if rf, ok := ret.Get(0).(func(context.Context, *model.ParameterWarehouse) <-chan repo.ResultRepository); ok {
		r0 = rf(ctxReq, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan repo.ResultRepository)
		}
	}

	return r0
}

// UpdatePhoneAddress provides a mock function with given fields: ctxReq, data
func (_m *MerchantAddressRepository) UpdatePhoneAddress(ctxReq context.Context, address model.PhoneData) <-chan repo.ResultRepository {
	ret := _m.Called(ctxReq, address)

	var r0 <-chan repo.ResultRepository
	if rf, ok := ret.Get(0).(func(context.Context, model.PhoneData) <-chan repo.ResultRepository); ok {
		r0 = rf(ctxReq, address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan repo.ResultRepository)
		}
	}

	return r0
}

// UpdatePrimaryAddressByRelationID provides a mock function with given fields: ctxReq, data
func (_m *MerchantAddressRepository) UpdatePrimaryAddressByRelationID(ctxReq context.Context, relationID, relationName string) <-chan repo.ResultRepository {
	ret := _m.Called(ctxReq, relationID, relationName)

	var r0 <-chan repo.ResultRepository
	if rf, ok := ret.Get(0).(func(context.Context, string, string) <-chan repo.ResultRepository); ok {
		r0 = rf(ctxReq, relationID, relationName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan repo.ResultRepository)
		}
	}

	return r0
}

// FindAddressMaps provides a mock function with given fields: ctxReq, data
func (_m *MerchantAddressRepository) FindAddressMaps(ctxReq context.Context, relationID, relationName string) <-chan repo.ResultRepository {
	ret := _m.Called(ctxReq, relationID, relationName)

	var r0 <-chan repo.ResultRepository
	if rf, ok := ret.Get(0).(func(context.Context, string, string) <-chan repo.ResultRepository); ok {
		r0 = rf(ctxReq, relationID, relationName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan repo.ResultRepository)
		}
	}

	return r0
}

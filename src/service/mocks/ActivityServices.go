// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"
import model "github.com/Bhinneka/user-service/src/service/model"

import sharedmodel "github.com/Bhinneka/user-service/src/shared/model"

// ActivityServices is an autogenerated mock type for the ActivityServices type
type ActivityServices struct {
	mock.Mock
}

// CreateLog provides a mock function with given fields: ctxReq, param
func (_m *ActivityServices) CreateLog(ctxReq context.Context, param model.Payload) <-chan model.ServiceResult {
	ret := _m.Called(ctxReq, param)

	var r0 <-chan model.ServiceResult
	if rf, ok := ret.Get(0).(func(context.Context, model.Payload) <-chan model.ServiceResult); ok {
		r0 = rf(ctxReq, param)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan model.ServiceResult)
		}
	}

	return r0
}

// GetAll provides a mock function with given fields: ctxReq, param
func (_m *ActivityServices) GetAll(ctxReq context.Context, param *sharedmodel.Parameters) <-chan model.ServiceResult {
	ret := _m.Called(ctxReq, param)

	var r0 <-chan model.ServiceResult
	if rf, ok := ret.Get(0).(func(context.Context, *sharedmodel.Parameters) <-chan model.ServiceResult); ok {
		r0 = rf(ctxReq, param)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan model.ServiceResult)
		}
	}

	return r0
}

// GetLogByID provides a mock function with given fields: ctxReq, logID
func (_m *ActivityServices) GetLogByID(ctxReq context.Context, logID string) <-chan model.ServiceResult {
	ret := _m.Called(ctxReq, logID)

	var r0 <-chan model.ServiceResult
	if rf, ok := ret.Get(0).(func(context.Context, string) <-chan model.ServiceResult); ok {
		r0 = rf(ctxReq, logID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan model.ServiceResult)
		}
	}

	return r0
}

// InsertLog provides a mock function with given fields: ctxReq, oldData, newData, payload
func (_m *ActivityServices) InsertLog(ctxReq context.Context, oldData interface{}, newData interface{}, payload model.Payload) error {
	ret := _m.Called(ctxReq, oldData, newData, payload)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}, model.Payload) error); ok {
		r0 = rf(ctxReq, oldData, newData, payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

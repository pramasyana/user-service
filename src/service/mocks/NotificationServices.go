// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"
import model "github.com/Bhinneka/user-service/src/service/model"

// NotificationServices is an autogenerated mock type for the NotificationServices type
type NotificationServices struct {
	mock.Mock
}

// GetTemplateByID provides a mock function with given fields: ctxReq, templateId, envKey
func (_m *NotificationServices) GetTemplateByID(ctxReq context.Context, templateId string, envKey string) <-chan model.ServiceResult {
	ret := _m.Called(ctxReq, templateId, envKey)

	var r0 <-chan model.ServiceResult
	if rf, ok := ret.Get(0).(func(context.Context, string, string) <-chan model.ServiceResult); ok {
		r0 = rf(ctxReq, templateId, envKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan model.ServiceResult)
		}
	}

	return r0
}

// SendEmail provides a mock function with given fields: ctxReq, email
func (_m *NotificationServices) SendEmail(ctxReq context.Context, email model.Email) (string, error) {
	ret := _m.Called(ctxReq, email)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, model.Email) string); ok {
		r0 = rf(ctxReq, email)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.Email) error); ok {
		r1 = rf(ctxReq, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

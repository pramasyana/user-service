// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"
import model "github.com/Bhinneka/user-service/src/service/model"

import shared "github.com/Bhinneka/user-service/src/shared"

// QPublisher is an autogenerated mock type for the QPublisher type
type QPublisher struct {
	mock.Mock
}

// BulkPublishKafka provides a mock function with given fields: ctxReq, topic, messages
func (_m *QPublisher) BulkPublishKafka(ctxReq context.Context, topic string, messages []model.Messages) error {
	ret := _m.Called(ctxReq, topic, messages)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []model.Messages) error); ok {
		r0 = rf(ctxReq, topic, messages)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Publish provides a mock function with given fields: ctxReq, topic, messageKey, message
func (_m *QPublisher) Publish(ctxReq context.Context, topic string, messageKey shared.MessageKey, message []byte) error {
	ret := _m.Called(ctxReq, topic, messageKey, message)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, shared.MessageKey, []byte) error); ok {
		r0 = rf(ctxReq, topic, messageKey, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PublishKafka provides a mock function with given fields: ctxReq, topic, messageKey, message
func (_m *QPublisher) PublishKafka(ctxReq context.Context, topic string, messageKey string, message []byte) error {
	ret := _m.Called(ctxReq, topic, messageKey, message)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []byte) error); ok {
		r0 = rf(ctxReq, topic, messageKey, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// QueueJob provides a mock function with given fields: ctxReq, payload, messageKey, jobType
func (_m *QPublisher) QueueJob(ctxReq context.Context, payload interface{}, messageKey string, jobType string) error {
	ret := _m.Called(ctxReq, payload, messageKey, jobType)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, string, string) error); ok {
		r0 = rf(ctxReq, payload, messageKey, jobType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

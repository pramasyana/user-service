package mocks

import (
	"context"

	"github.com/Bhinneka/user-service/src/applications/v1/model"
	"github.com/Bhinneka/user-service/src/applications/v1/usecase"
	"github.com/stretchr/testify/mock"
)

// ApplicationsUseCase is an autogenerated mock type for the ApplicationsUseCase type
type ApplicationsUseCase struct {
	mock.Mock
}

// GetApplicationsList provides a mock function
func (_m *ApplicationsUseCase) GetApplicationsList() <-chan usecase.ResultUseCase {
	ret := _m.Called()

	var r0 <-chan usecase.ResultUseCase
	if rf, ok := ret.Get(0).(func() <-chan usecase.ResultUseCase); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan usecase.ResultUseCase)
		}
	}

	return r0
}

// AddUpdateApplication provides a mock function with given fields: data
func (_m *ApplicationsUseCase) AddUpdateApplication(ctxReq context.Context, data model.Application) <-chan usecase.ResultUseCase {
	ret := _m.Called(ctxReq, data)

	var r0 <-chan usecase.ResultUseCase
	if rf, ok := ret.Get(0).(func(context.Context, model.Application) <-chan usecase.ResultUseCase); ok {
		r0 = rf(ctxReq, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan usecase.ResultUseCase)
		}
	}

	return r0
}

// DeleteApplication provides a mock function with given fields: data
func (_m *ApplicationsUseCase) DeleteApplication(ctxReq context.Context, id string) <-chan usecase.ResultUseCase {
	ret := _m.Called(ctxReq, id)

	var r0 <-chan usecase.ResultUseCase
	if rf, ok := ret.Get(0).(func(context.Context, string) <-chan usecase.ResultUseCase); ok {
		r0 = rf(ctxReq, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan usecase.ResultUseCase)
		}
	}

	return r0
}

// GetListApplication provides a mock function with given fields: data
func (_m *ApplicationsUseCase) GetListApplication(ctxReq context.Context, params *model.ParametersApplication) <-chan usecase.ResultUseCase {
	ret := _m.Called(ctxReq, params)

	var r0 <-chan usecase.ResultUseCase
	if rf, ok := ret.Get(0).(func(context.Context, *model.ParametersApplication) <-chan usecase.ResultUseCase); ok {
		r0 = rf(ctxReq, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan usecase.ResultUseCase)
		}
	}

	return r0
}
